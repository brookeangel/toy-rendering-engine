exit
!!("," =~ /-|\w/)
!!("1" =~ /-|\w/)
!!("-" =~ /-|\w/)
!!("-" =~ /-\w/)
!!("-" =~ /-/)
!!("-" =~ /\w\-/)
!!(" " =~ /\w\-/)
!!(" " =~ /\w||-/)
valid_identifier_char?(" ")
selectors
rules
pos
c
pos
c
content
next_char
pos
exit
next_char
exit
content.length
pos
next_char
exit
content
next_char
c
n
pos
n
next_char
value
n
next_char
exit
c
selectors
c
selectors
c
selectors
exit
c
selectors
pos
c
next_char
exit
valid_identifier_char?("h")
next_char
c
next_char
c
exit
c
selector
pos
n
next_char
n
pos
n
pos
n
content
pos
n
next
next_char
selectors
n
next_char
n
next_char
char
pos
n
next_char
n
next_char
n
exit
rules
content
next_char
pos
c
selectors
pos
n
parse_identifier
n
pos
exit
char == "\n"
exit
char
char == "\\"
(char == "\\" && content[pos + 1] == "n")
content
exit
c
consume_whitespace
content
pos
parse_identifier
n
consume_whitespace
pos
n
pos
exit
e
c
content
pos
c
exit
c
"\n".whitespace?
consume_whitespace
content
parse_identifier
pos
c
cc
c
selector
c
exit
end_of_content?
content.length
pos
nodes
c
nodes
c
nodes
c
pos
c
tag_name
attrs
c
tag_name
exit
x.call(next_char)
x = Proc.new { |char| char =~ /\w/ }
Proc.new { |char| char =~ /\w/ }
Proc.new({ |char| char =~ /\w/ })
content[pos]
pos
result
c
pos
result
exit
0 ? 'true' : 'false'
!!(content[pos] =~ /\w/)
content[pos] =~ /\w/
content[pos] =~ \/w\
content[pos]
char
parse_tag_name
c
char
prc.call(char)
c
char
prc
exit
content[1]
pos
char
tag_name
exit
1 =~ /1/
1 =~ /0-9/
1 =~ /[0-9]/
1 =~ /[0-9a-zA-Z]/
1 ~= /[0-9a-zA-Z]/
1 ~= /[0-9a-zA-Z]
parse_tag_name
tag_name
c
'aldsfj' =~ /[a-z]/
'aldsfj' =~ /a-z/
/[0-9]/ ~= 1
tag_name
c
content
pos
name
